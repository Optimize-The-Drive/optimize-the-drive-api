'''

Adds user, jwt and route table.

Revision ID: 9fc7409ae264
Revises: 
Create Date: 2024-02-07 05:15:24.360583

'''
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '9fc7409ae264'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
        sa.Column('username', sa.String(length=32), nullable=False),
        sa.Column('email', sa.String(length=128), nullable=False),
        sa.Column('password_hash', sa.String(length=128), nullable=False),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('verified', sa.Boolean(), server_default=sa.text('false'), nullable=False),
        sa.Column('id', sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('email', name=op.f('uq_users_email')),
        sa.UniqueConstraint('username', name=op.f('uq_users_username'))
    )
    op.create_table('jwt',
        sa.Column('jti', sa.String(length=36), nullable=False),
        sa.Column('type', sa.Enum('REFRESH', 'ACCESS', name='jwttype'), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('expires', sa.DateTime(), nullable=False),
        sa.Column('id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('jti', name=op.f('uq_jwt_jti'))
    )
    with op.batch_alter_table('jwt', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_jwt_user_id'), ['user_id'], unique=False)

    op.create_table('trip',
        sa.Column('name', sa.String(length=32), nullable=False),
        sa.Column('description', sa.String(length=250), nullable=True),
        sa.Column('points', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('modified_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('trip', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_trip_user_id'), ['user_id'], unique=False)

    # Trigger updates the modified_at column every time a row updates
    op.execute(
        sa.text(
            """
                create function
                    update_trip_modified_at()
                returns
                    trigger language plpgsql as $$
                begin
                    new.modified_at := now();
                    return new;
                end;
                $$;

                create trigger trig_update_trip_modified_at
                before update on trip
                for each row execute function update_trip_modified_at();             
            """
        )
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('trip', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_trip_user_id'))

    op.drop_table('trip')
    with op.batch_alter_table('jwt', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_jwt_user_id'))

    op.drop_table('jwt')
    op.drop_table('users')
    op.execute('drop type if exists jwttype')
    op.execute('drop function if exists update_trip_modified_at')
    # ### end Alembic commands ###
